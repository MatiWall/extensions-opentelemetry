{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"config/","text":"configure_logging(handlers=None, level=logging.INFO, enable_otel=False) Configure logging with optional OpenTelemetry integration. Source code in extensions/opentelemetry/config.py def configure_logging( handlers: list[logging.Handler] | None = None, level: int = logging.INFO, enable_otel: bool = False ): \"\"\"Configure logging with optional OpenTelemetry integration.\"\"\" if handlers is None: handlers = [] # Set custom exception handlers sys.excepthook = exception_handler threading.excepthook = exception_handler # Console handler for basic logging console_handler = logging.StreamHandler() handlers.append(console_handler) # Configure root logger logging.basicConfig( level=level, handlers=handlers, force=True ) if enable_otel: enable_opentelemetry_export() exception_handler(exc_type, exc_value, exc_traceback) Custom exception handler. Source code in extensions/opentelemetry/config.py def exception_handler(exc_type, exc_value, exc_traceback): \"\"\"Custom exception handler.\"\"\" logging.error(\"Uncaught exception\", exc_info=(exc_type, exc_value, exc_traceback))","title":"Config"},{"location":"config/#extensions.opentelemetry.config.configure_logging","text":"Configure logging with optional OpenTelemetry integration. Source code in extensions/opentelemetry/config.py def configure_logging( handlers: list[logging.Handler] | None = None, level: int = logging.INFO, enable_otel: bool = False ): \"\"\"Configure logging with optional OpenTelemetry integration.\"\"\" if handlers is None: handlers = [] # Set custom exception handlers sys.excepthook = exception_handler threading.excepthook = exception_handler # Console handler for basic logging console_handler = logging.StreamHandler() handlers.append(console_handler) # Configure root logger logging.basicConfig( level=level, handlers=handlers, force=True ) if enable_otel: enable_opentelemetry_export()","title":"configure_logging"},{"location":"config/#extensions.opentelemetry.config.exception_handler","text":"Custom exception handler. Source code in extensions/opentelemetry/config.py def exception_handler(exc_type, exc_value, exc_traceback): \"\"\"Custom exception handler.\"\"\" logging.error(\"Uncaught exception\", exc_info=(exc_type, exc_value, exc_traceback))","title":"exception_handler"}]}